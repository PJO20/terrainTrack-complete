<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Permissions - TerrainTrack</title>
    <link rel="stylesheet" href="/assets/css/style.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <style>
        .permissions-management {
            background: #f8fafc;
            min-height: 100vh;
            padding: 2rem;
        }

        /* Barre de navigation */
        .permissions-navigation {
            background: white;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 3px solid #667eea;
        }

        .nav-left {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .nav-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .nav-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .nav-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            color: #64748b;
            padding: 0.5rem 1rem;
            background: #f8fafc;
            border-radius: 20px;
            border: 1px solid #e2e8f0;
        }

        .nav-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .nav-back {
            background: #f1f5f9;
            color: #374151;
            border: 1px solid #d1d5db;
        }

        .nav-back:hover {
            background: #e2e8f0;
            transform: translateX(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .nav-breadcrumb {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .breadcrumb-item {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .breadcrumb-item a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .breadcrumb-item a:hover {
            color: #4f46e5;
            text-decoration: underline;
        }

        .breadcrumb-item.active {
            color: #1e293b;
            font-weight: 600;
        }

        .permissions-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .permissions-header h1 {
            margin: 0;
            font-size: 2rem;
            font-weight: 700;
        }

        .permissions-header p {
            margin: 0.5rem 0 0 0;
            opacity: 0.9;
        }

        .permissions-tabs {
            display: flex;
            background: white;
            border-radius: 12px;
            padding: 0.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .permissions-tab {
            flex: 1;
            padding: 0.75rem 1.5rem;
            border: none;
            background: transparent;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .permissions-tab.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .permissions-tab:hover:not(.active) {
            background: #f1f5f9;
        }

        .permissions-content {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .permissions-section {
            display: none;
        }

        .permissions-section.active {
            display: block;
        }

        /* Gestion des r√¥les */
        .roles-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .role-card {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1.5rem;
            border: 2px solid transparent;
            transition: all 0.3s ease;
            position: relative;
        }

        .role-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .role-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .role-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1e293b;
            margin: 0;
        }

        .role-actions {
            display: flex;
            gap: 0.5rem;
        }

        .role-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .role-btn.edit {
            background: #3b82f6;
            color: white;
        }

        .role-btn.delete {
            background: #ef4444;
            color: white;
        }

        .role-btn:hover {
            transform: scale(1.05);
        }

        .role-description {
            color: #64748b;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .role-permissions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .permission-badge {
            background: #e0e7ff;
            color: #3730a3;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        /* Gestion des utilisateurs */
        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .users-table th,
        .users-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .users-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .users-table tr:hover {
            background: #f8fafc;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-right: 1rem;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-details h4 {
            margin: 0;
            font-size: 1rem;
            color: #1e293b;
        }

        .user-details p {
            margin: 0;
            font-size: 0.875rem;
            color: #64748b;
        }

        .user-roles {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .role-badge {
            background: #fef3c7;
            color: #92400e;
            padding: 0.375rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-block;
            margin: 0.125rem;
        }

        .role-badge.admin {
            background: #fef3c7;
            color: #92400e;
        }

        .role-badge.manager {
            background: #fef3c7;
            color: #92400e;
        }

        .role-badge.technician {
            background: #fef3c7;
            color: #92400e;
        }

        .role-badge.viewer {
            background: #fef3c7;
            color: #92400e;
        }

        /* Matrice des permissions */
        .permissions-matrix {
            overflow-x: auto;
        }

        .matrix-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .matrix-table th,
        .matrix-table td {
            padding: 0.75rem;
            text-align: center;
            border: 1px solid #e2e8f0;
        }

        .matrix-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .matrix-table th.module-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .permission-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        /* Boutons d'action */
        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #f1f5f9;
            color: #374151;
            border: 1px solid #d1d5db;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-secondary:hover {
            background: #e2e8f0;
        }

        /* Modals */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #64748b;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 100px;
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .permissions-management {
                padding: 1rem;
            }
            
            .permissions-tabs {
                flex-direction: column;
            }
            
            .permissions-tab {
                margin-bottom: 0.5rem;
            }
            
            .roles-grid {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="permissions-management">
        <!-- Barre de navigation -->
        <div class="permissions-navigation fade-in">
            <div class="nav-left">
                <button class="nav-btn nav-back" onclick="goBack()">
                    <i class='bx bx-arrow-back'></i>
                    <span>Retour</span>
                </button>
                <div class="nav-breadcrumb">
                    <span class="breadcrumb-item">
                        <i class='bx bx-home'></i>
                        <a href="/dashboard">Accueil</a>
                    </span>
                    <i class='bx bx-chevron-right'></i>
                    <span class="breadcrumb-item">
                        <a href="/settings">Param√®tres</a>
                    </span>
                    <i class='bx bx-chevron-right'></i>
                    <span class="breadcrumb-item active">
                        <i class='bx bx-shield-check'></i>
                        Gestion des Permissions
                    </span>
                </div>
            </div>
            <div class="nav-right">
                <div class="nav-info">
                    <span class="nav-status">
                        <i class='bx bx-check-circle' style="color: #10b981;"></i>
                        Interface active
                    </span>
                </div>
            </div>
        </div>

        <!-- En-t√™te -->
        <div class="permissions-header fade-in">
            <h1><i class='bx bx-shield-check'></i> Gestion des Permissions</h1>
            <p>Interface compl√®te pour g√©rer les r√¥les, permissions et acc√®s utilisateurs</p>
        </div>

        <!-- Onglets -->
        <div class="permissions-tabs fade-in">
            <button class="permissions-tab active" data-tab="roles">
                <i class='bx bx-group'></i> R√¥les
            </button>
            <button class="permissions-tab" data-tab="users">
                <i class='bx bx-user'></i> Utilisateurs
            </button>
            <button class="permissions-tab" data-tab="permissions">
                <i class='bx bx-key'></i> Matrice des Permissions
            </button>
            <button class="permissions-tab" data-tab="audit">
                <i class='bx bx-history'></i> Audit
            </button>
        </div>

        <!-- Contenu -->
        <div class="permissions-content fade-in">
            <!-- Section R√¥les -->
            <div id="roles-section" class="permissions-section active">
                <div class="action-buttons">
                    <button class="btn-primary" onclick="openCreateRoleModal()">
                        <i class='bx bx-plus'></i> Cr√©er un r√¥le
                    </button>
                    <button class="btn-secondary" onclick="exportRoles()">
                        <i class='bx bx-export'></i> Exporter
                    </button>
                </div>

                <div class="roles-grid" id="roles-grid">
                    <!-- Les r√¥les seront charg√©s dynamiquement -->
                </div>
            </div>

            <!-- Section Utilisateurs -->
            <div id="users-section" class="permissions-section">
                <div class="action-buttons">
                    <button class="btn-primary" onclick="openAssignRoleModal()">
                        <i class='bx bx-user-plus'></i> Assigner un r√¥le
                    </button>
                    <button class="btn-secondary" onclick="exportUsers()">
                        <i class='bx bx-export'></i> Exporter
                    </button>
                </div>

                <table class="users-table" id="users-table">
                    <thead>
                        <tr>
                            <th>Utilisateur</th>
                            <th>Email</th>
                            <th>R√¥les</th>
                            <th>Derni√®re connexion</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Les utilisateurs seront charg√©s dynamiquement -->
                    </tbody>
                </table>
            </div>

            <!-- Section Matrice des Permissions -->
            <div id="permissions-section" class="permissions-section">

                <div class="permissions-matrix">
                    <table class="matrix-table" id="permissions-matrix">
                        <!-- La matrice sera g√©n√©r√©e dynamiquement -->
                    </table>
                </div>
            </div>

            <!-- Section Audit -->
            <div id="audit-section" class="permissions-section">
                <div id="audit-logs">
                    <!-- Les logs d'audit seront charg√©s dynamiquement -->
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Cr√©er/Modifier R√¥le -->
    <div id="role-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="role-modal-title">Cr√©er un r√¥le</h3>
                <button class="modal-close" onclick="closeRoleModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>
            <form id="role-form">
                <div class="form-group">
                    <label class="form-label" for="role-name">Nom du r√¥le</label>
                    <input type="text" id="role-name" name="role-name" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="role-display-name">Nom d'affichage</label>
                    <input type="text" id="role-display-name" name="role-display-name" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="role-description">Description</label>
                    <textarea id="role-description" name="role-description" class="form-input form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Permissions</label>
                    <div id="role-permissions-list">
                        <!-- Liste des permissions sera g√©n√©r√©e dynamiquement -->
                    </div>
                </div>
                <div class="action-buttons">
                    <button type="submit" class="btn-primary">
                        <i class='bx bx-save'></i> Sauvegarder
                    </button>
                    <button type="button" class="btn-secondary" onclick="closeRoleModal()">
                        <i class='bx bx-x'></i> Annuler
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Assigner R√¥le -->
    <div id="assign-role-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Assigner un r√¥le</h3>
                <button class="modal-close" onclick="closeAssignRoleModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>
            <form id="assign-role-form">
                <div class="form-group">
                    <label class="form-label" for="assign-user">Utilisateur</label>
                    <select id="assign-user" name="assign-user" class="form-input" required>
                        <option value="">S√©lectionner un utilisateur</option>
                        <!-- Les utilisateurs seront charg√©s dynamiquement -->
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="assign-role">R√¥le</label>
                    <select id="assign-role" name="assign-role" class="form-input" required>
                        <option value="">S√©lectionner un r√¥le</option>
                        <!-- Les r√¥les seront charg√©s dynamiquement -->
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeAssignRoleModal()">Annuler</button>
                    <button type="submit" class="btn-primary">Assigner le r√¥le</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Modifier les R√¥les d'un Utilisateur -->
    <div id="edit-user-roles-modal" class="modal">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class='bx bx-user-check'></i> 
                    Modifier les r√¥les de <span id="edit-user-name">l'utilisateur</span>
                </h3>
                <button class="modal-close" onclick="closeEditUserRolesModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1.5rem;">
                    <div id="edit-user-info" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                        <div id="edit-user-avatar" class="user-avatar" style="width: 50px; height: 50px; font-size: 1.2rem;"></div>
                        <div>
                            <h4 id="edit-user-display-name" style="margin: 0; color: #1e293b;"></h4>
                            <p id="edit-user-email" style="margin: 0; color: #64748b; font-size: 0.9rem;"></p>
                        </div>
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="margin-bottom: 1rem; color: #374151;">
                        <i class='bx bx-shield-check'></i> R√¥les disponibles
                    </h4>
                    <div id="available-roles-list" style="display: grid; gap: 0.75rem;">
                        <!-- Les r√¥les seront charg√©s dynamiquement -->
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeEditUserRolesModal()">
                        <i class='bx bx-x'></i> Annuler
                    </button>
                    <button type="button" class="btn-primary" onclick="saveUserRoles()">
                        <i class='bx bx-check'></i> Sauvegarder les modifications
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Retirer un R√¥le -->
    <div id="remove-role-modal" class="modal">
        <div class="modal-content" style="max-width: 500px;">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class='bx bx-user-minus' style="color: #ef4444;"></i> 
                    Retirer un r√¥le
                </h3>
                <button class="modal-close" onclick="closeRemoveRoleModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1.5rem;">
                    <div id="remove-user-info" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                        <div id="remove-user-avatar" class="user-avatar" style="width: 50px; height: 50px; font-size: 1.2rem;"></div>
                        <div>
                            <h4 id="remove-user-display-name" style="margin: 0; color: #1e293b;"></h4>
                            <p id="remove-user-email" style="margin: 0; color: #64748b; font-size: 0.9rem;"></p>
                        </div>
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="margin-bottom: 1rem; color: #374151;">
                        <i class='bx bx-shield-x'></i> S√©lectionner le r√¥le √† retirer
                    </h4>
                    <select id="remove-role-select" class="form-input" required>
                        <option value="">Choisir un r√¥le √† retirer</option>
                        <!-- Les r√¥les actuels de l'utilisateur seront charg√©s -->
                    </select>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeRemoveRoleModal()">
                        <i class='bx bx-x'></i> Annuler
                    </button>
                    <button type="button" class="btn-primary" onclick="confirmRemoveRole()" style="background: #ef4444;">
                        <i class='bx bx-trash'></i> Retirer le r√¥le
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Confirmation Vider l'Historique -->
    <div id="clear-audit-modal" class="modal">
        <div class="modal-content" style="max-width: 500px;">
            <div class="modal-header">
                <h3 class="modal-title" style="color: #ef4444; display: flex; align-items: center; gap: 0.5rem;">
                    <i class='bx bx-error-circle'></i> Confirmation de suppression
                </h3>
                <button class="modal-close" onclick="closeClearAuditModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>
            <div style="padding: 1rem 0;">
                <div style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem;">
                    <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.75rem;">
                        <i class='bx bx-shield-x' style="font-size: 1.5rem; color: #dc2626;"></i>
                        <h4 style="margin: 0; color: #dc2626; font-size: 1.1rem;">Action irr√©versible</h4>
                    </div>
                    <p style="margin: 0; color: #7f1d1d; font-size: 0.95rem; line-height: 1.5;">
                        Vous √™tes sur le point de supprimer d√©finitivement tout l'historique d'audit des permissions.
                    </p>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #374151; margin-bottom: 0.75rem; font-size: 1rem;">
                        <i class='bx bx-info-circle'></i> Cons√©quences de cette action :
                    </h4>
                    <ul style="color: #6b7280; font-size: 0.9rem; line-height: 1.6; margin: 0; padding-left: 1.5rem;">
                        <li>Suppression de tous les logs d'audit enregistr√©s</li>
                        <li>Perte de l'historique des modifications de permissions</li>
                        <li>Impossibilit√© de tra√ßabilit√© des actions pass√©es</li>
                        <li>Cette action ne peut pas √™tre annul√©e</li>
                    </ul>
                </div>

                <div style="background: #f3f4f6; border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem;">
                    <p style="margin: 0; color: #374151; font-size: 0.9rem;">
                        <i class='bx bx-lightbulb' style="color: #059669;"></i>
                        <strong>Recommandation :</strong> Exportez l'historique d'audit avant de le supprimer pour conserver une trace des modifications.
                    </p>
                </div>
            </div>
            
            <div class="action-buttons">
                <button type="button" class="btn-secondary" onclick="closeClearAuditModal()">
                    <i class='bx bx-x'></i> Annuler
                </button>
                <button type="button" onclick="confirmClearAuditLogs()" style="background: #ef4444; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; transition: all 0.3s ease;" onmouseover="this.style.background='#dc2626'" onmouseout="this.style.background='#ef4444'">
                    <i class='bx bx-trash'></i> Confirmer la suppression
                </button>
            </div>
        </div>
    </div>

    <script src="/backend-mvc/assets/js/permissions-management.js?v=<?= time() ?>"></script>
    
    <!-- JavaScript de secours pour l'onglet utilisateurs -->
    <script>
        // V√©rifier si le JavaScript principal est charg√©
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (typeof loadUsersData === 'undefined') {
                    console.log('üîÑ JavaScript principal non d√©tect√©, activation du syst√®me de secours');
                    
                    // Fonction de secours pour charger les utilisateurs
                    window.loadUsersData = async function() {
                        try {
                            console.log('üì° Chargement des utilisateurs depuis l\'API...');
                            
                            const response = await fetch('/test_permissions_api.php?action=users');
                            
                            if (!response.ok) {
                                throw new Error(`Erreur HTTP: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            
                            if (!data.success) {
                                throw new Error(data.error || 'Erreur lors du chargement des utilisateurs');
                            }
                            
                            console.log('‚úÖ Utilisateurs charg√©s depuis l\'API:', data.users.length);
                            
                            // Formater les donn√©es pour correspondre au format attendu
                            return data.users.map(user => ({
                                id: user.id,
                                name: user.name || `Utilisateur ${user.id}`,
                                email: user.email,
                                roles: user.roles || [user.role_display || user.role],
                                lastLogin: user.lastLogin || user.created_at,
                                status: user.status || 'active'
                            }));
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors du chargement des utilisateurs:', error);
                            
                            // En cas d'erreur, retourner des donn√©es de secours
                            return [
                                {
                                    id: 1,
                                    name: 'Administrateur Syst√®me',
                                    email: 'admin@terraintrack.com',
                                    roles: ['Super Administrateur'],
                                    lastLogin: new Date().toISOString(),
                                    status: 'active'
                                },
                                {
                                    id: 2,
                                    name: 'Jean Dupont',
                                    email: 'jean.dupont@terraintrack.com',
                                    roles: ['Chef d\'√©quipe'],
                                    lastLogin: new Date().toISOString(),
                                    status: 'active'
                                },
                                {
                                    id: 3,
                                    name: 'Marie Martin',
                                    email: 'marie.martin@terraintrack.com',
                                    roles: ['Technicien'],
                                    lastLogin: new Date().toISOString(),
                                    status: 'active'
                                }
                            ];
                        }
                    };
                    
                    // Fonction de secours pour afficher les utilisateurs
                    window.loadUsers = async function() {
                        console.log('üë§ Chargement et affichage des utilisateurs...');
                        
                        const usersTableBody = document.querySelector('#users-table tbody');
                        
                        if (!usersTableBody) {
                            console.error('‚ùå Tableau des utilisateurs non trouv√©');
                            return;
                        }
                        
                        // Afficher le spinner
                        usersTableBody.innerHTML = `
                            <tr>
                                <td colspan="5" style="text-align: center; padding: 3rem; color: #64748b;">
                                    <div style="display: inline-block; width: 40px; height: 40px; border: 3px solid #e5e7eb; border-top-color: #667eea; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                                    <br>Chargement des utilisateurs...
                                </td>
                            </tr>
                        `;
                        
                        try {
                            const users = await loadUsersData();
                            
                            if (!users || users.length === 0) {
                                usersTableBody.innerHTML = `
                                    <tr>
                                        <td colspan="5" style="text-align: center; padding: 3rem; color: #64748b;">
                                            <i class='bx bx-user' style="font-size: 3rem; margin-bottom: 1rem;"></i>
                                            <br>Aucun utilisateur trouv√©.
                                        </td>
                                    </tr>
                                `;
                                return;
                            }
                            
                            const usersHTML = users.map(user => {
                                const userInitials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
                                
                                // Cr√©er les badges de r√¥les avec les bonnes couleurs
                                const rolesBadges = user.roles.map(role => {
                                    let roleClass = 'role-badge';
                                    let roleText = role;
                                    
                                    // D√©terminer la classe CSS selon le r√¥le
                                    if (role.toLowerCase().includes('admin') || role.toLowerCase().includes('administrateur')) {
                                        roleClass += ' admin';
                                        roleText = 'Super Administrateur';
                                    } else if (role.toLowerCase().includes('manager') || role.toLowerCase().includes('chef')) {
                                        roleClass += ' manager';
                                        roleText = 'Chef d\'√©quipe';
                                    } else if (role.toLowerCase().includes('technicien') || role.toLowerCase().includes('technician')) {
                                        roleClass += ' technician';
                                        roleText = 'Technicien';
                                    } else {
                                        roleClass += ' viewer';
                                        roleText = role;
                                    }
                                    
                                    return `<span class="${roleClass}">${roleText}</span>`;
                                }).join('');
                                
                                // Formater la date de derni√®re connexion
                                let lastLoginFormatted = 'Jamais';
                                if (user.lastLogin) {
                                    try {
                                        const date = new Date(user.lastLogin);
                                        lastLoginFormatted = date.toLocaleDateString('fr-FR', {
                                            day: '2-digit',
                                            month: '2-digit',
                                            year: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        });
                                    } catch (e) {
                                        lastLoginFormatted = user.lastLogin;
                                    }
                                }
                                
                                return `
                                    <tr data-user-id="${user.id}">
                                        <td>
                                            <div class="user-info">
                                                <div class="user-avatar">${userInitials}</div>
                                                <div class="user-details">
                                                    <h4>${user.name}</h4>
                                                    <p>ID: ${user.id}</p>
                                                </div>
                                            </div>
                                        </td>
                                        <td>${user.email}</td>
                                        <td>
                                            <div class="user-roles">
                                                ${rolesBadges}
                                            </div>
                                        </td>
                                        <td>${lastLoginFormatted}</td>
                                        <td>
                                            <div style="display: flex; gap: 0.5rem;">
                                                <button class="role-btn edit" onclick="editUserRoles(${user.id})" title="Modifier les r√¥les">
                                                    <i class='bx bx-edit'></i>
                                                </button>
                                                <button class="role-btn delete" onclick="removeUserRole(${user.id})" title="Retirer un r√¥le">
                                                    <i class='bx bx-user-minus'></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `;
                            }).join('');
                            
                            usersTableBody.innerHTML = usersHTML;
                            console.log('‚úÖ Utilisateurs affich√©s:', users.length);
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors de l\'affichage des utilisateurs:', error);
                            usersTableBody.innerHTML = `
                                <tr>
                                    <td colspan="5" style="text-align: center; padding: 2rem; color: #ef4444;">
                                        <i class='bx bx-error' style="font-size: 2rem; margin-bottom: 1rem;"></i>
                                        <br>Erreur de chargement des utilisateurs
                                    </td>
                                </tr>
                            `;
                        }
                    };
                    
                    // Fonction de secours pour showSection
                    window.showSection = function(sectionName) {
                        console.log(`üìÇ Changement vers la section: ${sectionName}`);
                        
                        // Masquer toutes les sections
                        document.querySelectorAll('.permissions-section').forEach(section => {
                            section.classList.remove('active');
                        });
                        
                        // D√©sactiver tous les onglets
                        document.querySelectorAll('.permissions-tab').forEach(tab => {
                            tab.classList.remove('active');
                        });
                        
                        // Afficher la section demand√©e
                        const targetSection = document.getElementById(`${sectionName}-section`);
                        if (targetSection) {
                            targetSection.classList.add('active');
                        }
                        
                        // Activer l'onglet correspondant
                        const targetTab = document.querySelector(`[data-tab="${sectionName}"]`);
                        if (targetTab) {
                            targetTab.classList.add('active');
                        }
                        
                        // Charger les donn√©es selon la section
                        switch(sectionName) {
                            case 'users':
                                loadUsers();
                                break;
                            case 'roles':
                                loadRolesSection();
                                break;
                            case 'permissions':
                                loadPermissionsSection();
                                break;
                            case 'audit':
                                loadAuditSection();
                                break;
                        }
                    };
                    
                    // Fonction de secours pour charger la section R√¥les
                    window.loadRolesSection = function() {
                        const rolesGrid = document.getElementById('roles-grid');
                        if (rolesGrid) {
                            rolesGrid.innerHTML = `
                                <div class="role-card">
                                    <div class="role-header">
                                        <h3 class="role-name">Administrateur</h3>
                                        <div class="role-actions">
                                            <button class="role-btn edit" title="Modifier">
                                                <i class='bx bx-edit'></i>
                                            </button>
                                            <button class="role-btn delete" title="Supprimer">
                                                <i class='bx bx-trash'></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="role-description">Acc√®s complet au syst√®me</p>
                                    <div style="margin-bottom: 1rem;">
                                        <small style="color: #64748b;">
                                            <i class='bx bx-user'></i> 2 utilisateur(s)
                                        </small>
                                    </div>
                                    <div class="role-permissions">
                                        <span class="permission-badge">CREATE_USER</span>
                                        <span class="permission-badge">EDIT_USER</span>
                                        <span class="permission-badge">DELETE_USER</span>
                                        <span class="permission-badge">+15 autres</span>
                                    </div>
                                </div>
                                <div class="role-card">
                                    <div class="role-header">
                                        <h3 class="role-name">Chef d'√©quipe</h3>
                                        <div class="role-actions">
                                            <button class="role-btn edit" title="Modifier">
                                                <i class='bx bx-edit'></i>
                                            </button>
                                            <button class="role-btn delete" title="Supprimer">
                                                <i class='bx bx-trash'></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="role-description">Gestion d'√©quipe et interventions</p>
                                    <div style="margin-bottom: 1rem;">
                                        <small style="color: #64748b;">
                                            <i class='bx bx-user'></i> 0 utilisateur(s)
                                        </small>
                                    </div>
                                    <div class="role-permissions">
                                        <span class="permission-badge">CREATE_INTERVENTION</span>
                                        <span class="permission-badge">EDIT_INTERVENTION</span>
                                        <span class="permission-badge">VIEW_REPORTS</span>
                                        <span class="permission-badge">+8 autres</span>
                                    </div>
                                </div>
                                <div class="role-card">
                                    <div class="role-header">
                                        <h3 class="role-name">Technicien</h3>
                                        <div class="role-actions">
                                            <button class="role-btn edit" title="Modifier">
                                                <i class='bx bx-edit'></i>
                                            </button>
                                            <button class="role-btn delete" title="Supprimer">
                                                <i class='bx bx-trash'></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="role-description">Ex√©cution des interventions</p>
                                    <div style="margin-bottom: 1rem;">
                                        <small style="color: #64748b;">
                                            <i class='bx bx-user'></i> 5 utilisateur(s)
                                        </small>
                                    </div>
                                    <div class="role-permissions">
                                        <span class="permission-badge">VIEW_INTERVENTION</span>
                                        <span class="permission-badge">UPDATE_STATUS</span>
                                        <span class="permission-badge">+3 autres</span>
                                    </div>
                                </div>
                            `;
                        }
                    };
                    
                    // Fonction de secours pour charger la section Permissions
                    window.loadPermissionsSection = async function() {
                        const permissionsMatrix = document.getElementById('permissions-matrix');
                        if (!permissionsMatrix) return;
                        
                        // Afficher le spinner de chargement
                        permissionsMatrix.innerHTML = `
                            <div style="text-align: center; padding: 4rem; color: #64748b;">
                                <div style="display: inline-block; width: 50px; height: 50px; border: 4px solid #e5e7eb; border-top-color: #667eea; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 1rem;"></div>
                                <br>Chargement des permissions depuis la base de donn√©es...
                            </div>
                        `;
                        
                        try {
                            console.log('üì° Chargement des permissions depuis l\'API...');
                            
                            const response = await fetch('/test_permissions_api.php?action=permissions');
                            
                            if (!response.ok) {
                                throw new Error(`Erreur HTTP: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            
                            if (!data.success) {
                                throw new Error(data.error || 'Erreur lors du chargement des permissions');
                            }
                            
                            console.log(`‚úÖ ${data.total_permissions} permissions charg√©es depuis la base de donn√©es`);
                            console.log(`‚úÖ ${data.total_roles} r√¥les charg√©s depuis la base de donn√©es`);
                            
                            // G√©n√©rer l'interface avec les vraies donn√©es
                            permissionsMatrix.innerHTML = generatePermissionsMatrixHTML(data);
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors du chargement des permissions:', error);
                            
                            // Afficher un message d'erreur avec fallback
                            permissionsMatrix.innerHTML = `
                                <div style="text-align: center; padding: 4rem; color: #ef4444;">
                                    <i class='bx bx-error-circle' style="font-size: 3rem; margin-bottom: 1rem;"></i>
                                    <br>Erreur de chargement des permissions
                                    <br><small style="color: #64748b;">Chargement des donn√©es de secours...</small>
                                </div>
                            `;
                            
                            // Charger les donn√©es de secours apr√®s 2 secondes
                            setTimeout(() => {
                                permissionsMatrix.innerHTML = generateFallbackPermissionsMatrix();
                            }, 2000);
                        }
                    };
                    
                    // Fonction pour g√©n√©rer la matrice avec les vraies donn√©es
                    window.generatePermissionsMatrixHTML = function(data) {
                        const { permissions, roles, matrix, permissionsByModule } = data;
                        
                        // G√©n√©rer les en-t√™tes des r√¥les
                        const roleHeaders = roles.map(role => {
                            const roleInitial = role.display_name ? role.display_name[0].toUpperCase() : role.name[0].toUpperCase();
                            const roleColors = {
                                'admin': { bg: 'linear-gradient(135deg, #fef3c7, #f59e0b)', color: '#92400e' },
                                'manager': { bg: 'linear-gradient(135deg, #dbeafe, #3b82f6)', color: '#1e40af' },
                                'technician': { bg: 'linear-gradient(135deg, #d1fae5, #10b981)', color: '#065f46' },
                                'viewer': { bg: 'linear-gradient(135deg, #f3e8ff, #8b5cf6)', color: '#5b21b6' }
                            };
                            
                            let roleColor = roleColors.viewer; // Par d√©faut
                            if (role.name.toLowerCase().includes('admin')) roleColor = roleColors.admin;
                            else if (role.name.toLowerCase().includes('manager') || role.name.toLowerCase().includes('chef')) roleColor = roleColors.manager;
                            else if (role.name.toLowerCase().includes('technic')) roleColor = roleColors.technician;
                            
                            return `
                                <th style="text-align: center; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0;">
                                    <div style="display: flex; flex-direction: column; align-items: center; gap: 0.5rem;">
                                        <div style="width: 40px; height: 40px; background: ${roleColor.bg}; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: ${roleColor.color}; font-weight: bold;">${roleInitial}</div>
                                        <span style="font-size: 0.9rem;">${role.display_name || role.name}</span>
                                    </div>
                                </th>
                            `;
                        }).join('');
                        
                        // G√©n√©rer les lignes de permissions par module
                        let permissionRows = '';
                        let rowIndex = 0;
                        
                        Object.keys(permissionsByModule).forEach(module => {
                            const modulePermissions = permissionsByModule[module];
                            const moduleDisplayName = module.charAt(0).toUpperCase() + module.slice(1);
                            
                            // En-t√™te de module
                            permissionRows += `
                                <tr style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                                    <td colspan="${roles.length + 1}" style="padding: 1rem 1.5rem; font-weight: 700; font-size: 1.1rem;">
                                        <i class='bx bx-folder' style="margin-right: 0.5rem;"></i>
                                        Module ${moduleDisplayName} (${modulePermissions.length} permissions)
                                    </td>
                                </tr>
                            `;
                            
                            // Permissions du module
                            modulePermissions.forEach(permission => {
                                const bgColor = rowIndex % 2 === 0 ? '#ffffff' : '#f9fafb';
                                const permissionIcon = getPermissionIcon(permission.action);
                                const permissionColor = getPermissionColor(permission.action);
                                
                                // G√©n√©rer les cellules de permissions pour chaque r√¥le
                                const permissionCells = roles.map(role => {
                                    const hasPermission = matrix[role.id] && matrix[role.id].includes(permission.name);
                                    return `
                                        <td style="text-align: center; padding: 1rem; border-bottom: 1px solid #f1f5f9;">
                                            ${generatePermissionToggle(permission.name, role.id, hasPermission)}
                                        </td>
                                    `;
                                }).join('');
                                
                                permissionRows += `
                                    <tr style="background: ${bgColor}; transition: all 0.3s ease;" onmouseover="this.style.background='#f0f9ff'" onmouseout="this.style.background='${bgColor}'">
                                        <td style="padding: 1rem 1.5rem; border-bottom: 1px solid #f1f5f9;">
                                            <div style="display: flex; align-items: center; gap: 0.75rem;">
                                                <div style="width: 32px; height: 32px; background: ${permissionColor}20; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                                                    <i class='bx ${permissionIcon}' style="color: ${permissionColor}; font-size: 1.1rem;"></i>
                                                </div>
                                                <div>
                                                    <div style="font-weight: 600; color: #1e293b; margin-bottom: 0.25rem;">${permission.display_name || permission.name}</div>
                                                    <div style="font-size: 0.8rem; color: #64748b; font-family: monospace;">${permission.name}</div>
                                                    ${permission.description ? `<div style="font-size: 0.75rem; color: #9ca3af; margin-top: 0.25rem;">${permission.description}</div>` : ''}
                                                </div>
                                            </div>
                                        </td>
                                        ${permissionCells}
                                    </tr>
                                `;
                                rowIndex++;
                            });
                        });
                        
                        return `
                            <div class="permissions-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; padding: 1.5rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; color: white;">
                                <div>
                                    <h2 style="margin: 0; font-size: 1.5rem; font-weight: 700;">Matrice des Permissions</h2>
                                    <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">${permissions.length} permissions ‚Ä¢ ${roles.length} r√¥les ‚Ä¢ Donn√©es en temps r√©el</p>
                                </div>
                                <div style="display: flex; gap: 1rem;">
                                    <button class="btn-save-matrix" onclick="savePermissionsMatrix()" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                        <i class='bx bx-save'></i> Sauvegarder
                                    </button>
                                    <button class="btn-reset-matrix" onclick="resetPermissionsMatrix()" style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                        <i class='bx bx-refresh'></i> R√©initialiser
                                    </button>
                                </div>
                            </div>
                            
                            <div class="permissions-matrix-container" style="background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.08);">
                                <table class="permissions-matrix-table" style="width: 100%; border-collapse: collapse;">
                                    <thead>
                                        <tr style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
                                            <th style="text-align: left; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0; min-width: 300px;">
                                                <i class='bx bx-key' style="margin-right: 0.5rem; color: #667eea;"></i>
                                                Permissions
                                            </th>
                                            ${roleHeaders}
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${permissionRows}
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="permissions-legend" style="margin-top: 2rem; padding: 1.5rem; background: #f8fafc; border-radius: 12px; border-left: 4px solid #667eea;">
                                <h4 style="margin: 0 0 1rem 0; color: #1e293b; display: flex; align-items: center; gap: 0.5rem;">
                                    <i class='bx bx-info-circle' style="color: #667eea;"></i>
                                    L√©gende des permissions
                                </h4>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <div style="width: 20px; height: 20px; background: #10b981; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
                                            <i class='bx bx-check' style="color: white; font-size: 0.8rem;"></i>
                                        </div>
                                        <span style="color: #4b5563;">Permission accord√©e</span>
                                    </div>
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <div style="width: 20px; height: 20px; background: #e5e7eb; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
                                            <i class='bx bx-x' style="color: #6b7280; font-size: 0.8rem;"></i>
                                        </div>
                                        <span style="color: #4b5563;">Permission refus√©e</span>
                                    </div>
                                </div>
                            </div>
                        `;
                    };
                    
                    // Fonction pour obtenir l'ic√¥ne d'une permission
                    window.getPermissionIcon = function(action) {
                        const iconMap = {
                            'create': 'bx-plus-circle',
                            'read': 'bx-show',
                            'view': 'bx-show',
                            'edit': 'bx-edit',
                            'update': 'bx-edit',
                            'delete': 'bx-trash',
                            'manage': 'bx-cog',
                            'access': 'bx-key',
                            'export': 'bx-export',
                            'import': 'bx-import',
                            'approve': 'bx-check-circle',
                            'reject': 'bx-x-circle',
                            'assign': 'bx-user-plus',
                            'remove': 'bx-user-minus'
                        };
                        
                        const actionLower = action.toLowerCase();
                        for (const [key, icon] of Object.entries(iconMap)) {
                            if (actionLower.includes(key)) {
                                return icon;
                            }
                        }
                        return 'bx-shield-check'; // Ic√¥ne par d√©faut
                    };
                    
                    // Fonction pour obtenir la couleur d'une permission
                    window.getPermissionColor = function(action) {
                        const colorMap = {
                            'create': '#10b981',
                            'read': '#06b6d4',
                            'view': '#06b6d4',
                            'edit': '#f59e0b',
                            'update': '#f59e0b',
                            'delete': '#ef4444',
                            'manage': '#8b5cf6',
                            'access': '#3b82f6',
                            'export': '#06b6d4',
                            'import': '#10b981',
                            'approve': '#10b981',
                            'reject': '#ef4444',
                            'assign': '#3b82f6',
                            'remove': '#ef4444'
                        };
                        
                        const actionLower = action.toLowerCase();
                        for (const [key, color] of Object.entries(colorMap)) {
                            if (actionLower.includes(key)) {
                                return color;
                            }
                        }
                        return '#6b7280'; // Couleur par d√©faut
                    };
                    
                    // Fonction de secours avec donn√©es statiques
                    window.generateFallbackPermissionsMatrix = function() {
                        return `
                            <div class="permissions-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; padding: 1.5rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; color: white;">
                                <div>
                                    <h2 style="margin: 0; font-size: 1.5rem; font-weight: 700;">Matrice des Permissions</h2>
                                    <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">Donn√©es de secours - Veuillez v√©rifier la connexion √† la base de donn√©es</p>
                                </div>
                                <div style="display: flex; gap: 1rem;">
                                    <button class="btn-save-matrix" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                        <i class='bx bx-save'></i> Sauvegarder
                                    </button>
                                    <button class="btn-reset-matrix" style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                        <i class='bx bx-refresh'></i> R√©initialiser
                                    </button>
                                </div>
                            </div>
                            
                            <div class="permissions-matrix-container" style="background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.08);">
                                <table class="permissions-matrix-table" style="width: 100%; border-collapse: collapse;">
                                    <thead>
                                        <tr style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
                                            <th style="text-align: left; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0;">
                                                <i class='bx bx-key' style="margin-right: 0.5rem; color: #667eea;"></i>
                                                Permissions
                                            </th>
                                            <th style="text-align: center; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0;">
                                                <div style="display: flex; flex-direction: column; align-items: center; gap: 0.5rem;">
                                                    <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #fef3c7, #f59e0b); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #92400e; font-weight: bold;">A</div>
                                                    <span>Administrateur</span>
                                                </div>
                                            </th>
                                            <th style="text-align: center; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0;">
                                                <div style="display: flex; flex-direction: column; align-items: center; gap: 0.5rem;">
                                                    <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #dbeafe, #3b82f6); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #1e40af; font-weight: bold;">M</div>
                                                    <span>Chef d'√©quipe</span>
                                                </div>
                                            </th>
                                            <th style="text-align: center; padding: 1.5rem; font-weight: 700; color: #1e293b; border-bottom: 2px solid #e2e8f0;">
                                                <div style="display: flex; flex-direction: column; align-items: center; gap: 0.5rem;">
                                                    <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #d1fae5, #10b981); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #065f46; font-weight: bold;">T</div>
                                                    <span>Technicien</span>
                                                </div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${generatePermissionRows()}
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="permissions-legend" style="margin-top: 2rem; padding: 1.5rem; background: #f8fafc; border-radius: 12px; border-left: 4px solid #667eea;">
                                <h4 style="margin: 0 0 1rem 0; color: #1e293b; display: flex; align-items: center; gap: 0.5rem;">
                                    <i class='bx bx-info-circle' style="color: #667eea;"></i>
                                    L√©gende des permissions
                                </h4>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <div style="width: 20px; height: 20px; background: #10b981; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
                                            <i class='bx bx-check' style="color: white; font-size: 0.8rem;"></i>
                                        </div>
                                        <span style="color: #4b5563;">Permission accord√©e</span>
                                    </div>
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <div style="width: 20px; height: 20px; background: #e5e7eb; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
                                            <i class='bx bx-x' style="color: #6b7280; font-size: 0.8rem;"></i>
                                        </div>
                                        <span style="color: #4b5563;">Permission refus√©e</span>
                                    </div>
                                </div>
                            </div>
                        `;
                    };
                    
                    // Fonction pour g√©n√©rer les lignes de permissions
                    window.generatePermissionRows = function() {
                        const permissions = [
                            { name: 'Cr√©er des utilisateurs', key: 'CREATE_USER', admin: true, manager: false, tech: false, icon: 'bx-user-plus', color: '#3b82f6' },
                            { name: 'Modifier des utilisateurs', key: 'EDIT_USER', admin: true, manager: false, tech: false, icon: 'bx-user-check', color: '#8b5cf6' },
                            { name: 'Supprimer des utilisateurs', key: 'DELETE_USER', admin: true, manager: false, tech: false, icon: 'bx-user-minus', color: '#ef4444' },
                            { name: 'Cr√©er des interventions', key: 'CREATE_INTERVENTION', admin: true, manager: true, tech: false, icon: 'bx-plus-circle', color: '#10b981' },
                            { name: 'Voir les interventions', key: 'VIEW_INTERVENTION', admin: true, manager: true, tech: true, icon: 'bx-show', color: '#06b6d4' },
                            { name: 'Modifier les interventions', key: 'EDIT_INTERVENTION', admin: true, manager: true, tech: false, icon: 'bx-edit', color: '#f59e0b' },
                            { name: 'Supprimer les interventions', key: 'DELETE_INTERVENTION', admin: true, manager: false, tech: false, icon: 'bx-trash', color: '#ef4444' },
                            { name: 'Voir les rapports', key: 'VIEW_REPORTS', admin: true, manager: true, tech: false, icon: 'bx-bar-chart', color: '#8b5cf6' },
                            { name: 'Exporter les donn√©es', key: 'EXPORT_DATA', admin: true, manager: true, tech: false, icon: 'bx-export', color: '#06b6d4' },
                            { name: 'G√©rer les permissions', key: 'MANAGE_PERMISSIONS', admin: true, manager: false, tech: false, icon: 'bx-shield-check', color: '#ef4444' },
                            { name: 'Voir le tableau de bord', key: 'VIEW_DASHBOARD', admin: true, manager: true, tech: true, icon: 'bx-dashboard', color: '#10b981' },
                            { name: 'G√©rer les v√©hicules', key: 'MANAGE_VEHICLES', admin: true, manager: true, tech: false, icon: 'bx-car', color: '#f59e0b' },
                            { name: 'Voir les statistiques', key: 'VIEW_STATS', admin: true, manager: true, tech: false, icon: 'bx-line-chart', color: '#8b5cf6' },
                            { name: 'G√©rer les √©quipes', key: 'MANAGE_TEAMS', admin: true, manager: true, tech: false, icon: 'bx-group', color: '#3b82f6' },
                            { name: 'Acc√®s aux param√®tres', key: 'ACCESS_SETTINGS', admin: true, manager: false, tech: false, icon: 'bx-cog', color: '#6b7280' }
                        ];
                        
                        return permissions.map((perm, index) => {
                            const bgColor = index % 2 === 0 ? '#ffffff' : '#f9fafb';
                            
                            return `
                                <tr style="background: ${bgColor}; transition: all 0.3s ease;" onmouseover="this.style.background='#f0f9ff'" onmouseout="this.style.background='${bgColor}'">
                                    <td style="padding: 1rem 1.5rem; border-bottom: 1px solid #f1f5f9;">
                                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                                            <div style="width: 32px; height: 32px; background: ${perm.color}20; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                                                <i class='bx ${perm.icon}' style="color: ${perm.color}; font-size: 1.1rem;"></i>
                                            </div>
                                            <div>
                                                <div style="font-weight: 600; color: #1e293b; margin-bottom: 0.25rem;">${perm.name}</div>
                                                <div style="font-size: 0.8rem; color: #64748b; font-family: monospace;">${perm.key}</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td style="text-align: center; padding: 1rem; border-bottom: 1px solid #f1f5f9;">
                                        ${generatePermissionToggle(perm.key, 'admin', perm.admin)}
                                    </td>
                                    <td style="text-align: center; padding: 1rem; border-bottom: 1px solid #f1f5f9;">
                                        ${generatePermissionToggle(perm.key, 'manager', perm.manager)}
                                    </td>
                                    <td style="text-align: center; padding: 1rem; border-bottom: 1px solid #f1f5f9;">
                                        ${generatePermissionToggle(perm.key, 'tech', perm.tech)}
                                    </td>
                                </tr>
                            `;
                        }).join('');
                    };
                    
                    // Fonction pour g√©n√©rer un toggle de permission
                    window.generatePermissionToggle = function(permissionKey, role, isEnabled) {
                        const toggleId = `toggle_${permissionKey}_${role}`;
                        const bgColor = isEnabled ? '#10b981' : '#e5e7eb';
                        const iconColor = isEnabled ? 'white' : '#9ca3af';
                        const icon = isEnabled ? 'bx-check' : 'bx-x';
                        
                        return `
                            <div class="permission-toggle" 
                                 id="${toggleId}" 
                                 data-permission="${permissionKey}" 
                                 data-role="${role}" 
                                 data-enabled="${isEnabled}"
                                 onclick="togglePermission('${permissionKey}', '${role}')"
                                 style="
                                     width: 40px; 
                                     height: 40px; 
                                     background: ${bgColor}; 
                                     border-radius: 8px; 
                                     display: inline-flex; 
                                     align-items: center; 
                                     justify-content: center; 
                                     cursor: pointer; 
                                     transition: all 0.3s ease;
                                     border: 2px solid transparent;
                                 "
                                 onmouseover="this.style.transform='scale(1.1)'; this.style.borderColor='${isEnabled ? '#059669' : '#d1d5db'}'"
                                 onmouseout="this.style.transform='scale(1)'; this.style.borderColor='transparent'">
                                <i class='bx ${icon}' style="color: ${iconColor}; font-size: 1.2rem; font-weight: bold;"></i>
                            </div>
                        `;
                    };
                    
                    // Fonction pour basculer une permission
                    window.togglePermission = function(permissionKey, role) {
                        console.log(`üîÑ Toggle permission: ${permissionKey} pour r√¥le: ${role}`);
                        
                        const toggleId = `toggle_${permissionKey}_${role}`;
                        const toggle = document.getElementById(toggleId);
                        
                        if (!toggle) {
                            console.error(`‚ùå Toggle non trouv√©: ${toggleId}`);
                            return;
                        }
                        
                        const currentState = toggle.dataset.enabled === 'true';
                        const newState = !currentState;
                        
                        console.log(`üîÑ √âtat: ${currentState} ‚Üí ${newState}`);
                        
                        // Mettre √† jour l'√©tat
                        toggle.dataset.enabled = newState;
                        
                        // Mettre √† jour l'apparence
                        const bgColor = newState ? '#10b981' : '#e5e7eb';
                        const iconColor = newState ? 'white' : '#9ca3af';
                        const icon = newState ? 'bx-check' : 'bx-x';
                        
                        toggle.style.background = bgColor;
                        toggle.querySelector('i').className = `bx ${icon}`;
                        toggle.querySelector('i').style.color = iconColor;
                        
                        // Animation de feedback
                        toggle.style.transform = 'scale(0.9)';
                        setTimeout(() => {
                            toggle.style.transform = 'scale(1)';
                        }, 150);
                        
                        console.log(`‚úÖ Permission ${permissionKey} pour r√¥le ${role}: ${newState ? 'ACTIV√âE' : 'D√âSACTIV√âE'}`);
                    };
                    
                    // Fonction pour sauvegarder la matrice des permissions
                    window.savePermissionsMatrix = async function() {
                        try {
                            console.log('üíæ Sauvegarde de la matrice des permissions...');
                            
                            // Collecter toutes les permissions modifi√©es
                            const toggles = document.querySelectorAll('.permission-toggle');
                            console.log(`üîç Trouv√© ${toggles.length} toggles de permissions`);
                            
                            if (toggles.length === 0) {
                                throw new Error('Aucun toggle de permission trouv√©. La matrice est-elle charg√©e ?');
                            }
                            
                            const permissions = {};
                            
                            toggles.forEach((toggle, index) => {
                                const permission = toggle.dataset.permission;
                                const role = toggle.dataset.role;
                                const enabled = toggle.dataset.enabled === 'true';
                                
                                console.log(`Toggle ${index}: permission=${permission}, role=${role}, enabled=${enabled}`);
                                
                                if (!permission || !role) {
                                    console.warn(`Toggle ${index} manque des donn√©es: permission=${permission}, role=${role}`);
                                    return;
                                }
                                
                                if (!permissions[role]) {
                                    permissions[role] = [];
                                }
                                
                                if (enabled) {
                                    permissions[role].push(permission);
                                }
                            });
                            
                            // Nettoyer les doublons dans chaque r√¥le
                            Object.keys(permissions).forEach(roleId => {
                                permissions[roleId] = [...new Set(permissions[roleId])];
                                console.log(`R√¥le ${roleId} apr√®s nettoyage:`, permissions[roleId]);
                            });
                            
                            console.log('üìä Permissions collect√©es:', permissions);
                            
                            // V√©rifier qu'on a des donn√©es √† sauvegarder
                            const totalPermissions = Object.values(permissions).reduce((sum, perms) => sum + perms.length, 0);
                            if (totalPermissions === 0) {
                                throw new Error('Aucune permission activ√©e trouv√©e');
                            }
                            
                            // Envoyer √† l'API
                            console.log('üì° Envoi des donn√©es √† l\'API...');
                            const response = await fetch('/test_permissions_api.php', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    action: 'save-permissions-matrix',
                                    permissions: permissions
                                })
                            });
                            
                            console.log('üì° R√©ponse re√ßue:', response.status, response.statusText);
                            
                            const data = await response.json();
                            console.log('üìÑ Donn√©es de r√©ponse:', data);
                            
                            if (data.success) {
                                showNotification('‚úÖ Matrice des permissions sauvegard√©e avec succ√®s', 'success');
                                console.log('‚úÖ Matrice sauvegard√©e');
                            } else {
                                throw new Error(data.error || 'Erreur lors de la sauvegarde');
                            }
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors de la sauvegarde:', error);
                            showNotification(`‚ùå Erreur lors de la sauvegarde de la matrice: ${error.message}`, 'error');
                        }
                    };
                    
                    // Fonction pour r√©initialiser la matrice des permissions
                    window.resetPermissionsMatrix = function() {
                        if (confirm('‚ö†Ô∏è √ätes-vous s√ªr de vouloir r√©initialiser la matrice des permissions ?\n\nCela rechargera les donn√©es depuis la base de donn√©es et annulera toutes les modifications non sauvegard√©es.')) {
                            console.log('üîÑ R√©initialisation de la matrice des permissions...');
                            loadPermissionsSection();
                        }
                    };
                    
                    // Fonction pour afficher une notification
                    window.showNotification = function(message, type = 'info') {
                        // Cr√©er la notification
                        const notification = document.createElement('div');
                        notification.style.cssText = `
                            position: fixed;
                            top: 20px;
                            right: 20px;
                            padding: 1rem 1.5rem;
                            border-radius: 8px;
                            color: white;
                            font-weight: 500;
                            z-index: 10000;
                            max-width: 400px;
                            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
                            animation: slideInRight 0.3s ease-out;
                        `;
                        
                        // Couleurs selon le type
                        const colors = {
                            'success': '#10b981',
                            'error': '#ef4444',
                            'warning': '#f59e0b',
                            'info': '#3b82f6'
                        };
                        
                        notification.style.background = colors[type] || colors.info;
                        notification.textContent = message;
                        
                        // Ajouter au DOM
                        document.body.appendChild(notification);
                        
                        // Supprimer apr√®s 5 secondes
                        setTimeout(() => {
                            notification.style.animation = 'slideOutRight 0.3s ease-in';
                            setTimeout(() => {
                                if (notification.parentNode) {
                                    notification.parentNode.removeChild(notification);
                                }
                            }, 300);
                        }, 5000);
                    };
                    
                    // Fonction pour charger la section Audit avec les vraies donn√©es
                    window.loadAuditSection = async function() {
                        const auditLogs = document.getElementById('audit-logs');
                        if (!auditLogs) return;
                        
                        // Afficher le spinner de chargement
                        auditLogs.innerHTML = `
                            <div style="text-align: center; padding: 4rem; color: #64748b;">
                                <div style="display: inline-block; width: 50px; height: 50px; border: 4px solid #e5e7eb; border-top-color: #667eea; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 1rem;"></div>
                                <br>Chargement de l'historique d'audit...
                            </div>
                        `;
                        
                        try {
                            console.log('üì° Chargement des logs d\'audit depuis l\'API...');
                            
                            const response = await fetch('/test_permissions_api.php?action=audit');
                            
                            if (!response.ok) {
                                throw new Error(`Erreur HTTP: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            
                            if (!data.success) {
                                throw new Error(data.error || 'Erreur lors du chargement des logs d\'audit');
                            }
                            
                            console.log(`‚úÖ ${data.logs.length} logs d'audit charg√©s depuis la base de donn√©es`);
                            
                            // G√©n√©rer l'interface avec les vraies donn√©es
                            auditLogs.innerHTML = generateAuditHTML(data);
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors du chargement des logs d\'audit:', error);
                            
                            // Afficher un message d'erreur avec fallback
                            auditLogs.innerHTML = `
                                <div style="text-align: center; padding: 4rem; color: #ef4444;">
                                    <i class='bx bx-error-circle' style="font-size: 3rem; margin-bottom: 1rem;"></i>
                                    <br>Erreur de chargement de l'historique d'audit
                                    <br><small style="color: #64748b;">Chargement des donn√©es de secours...</small>
                                </div>
                            `;
                            
                            // Charger les donn√©es de secours apr√®s 2 secondes
                            setTimeout(() => {
                                auditLogs.innerHTML = generateFallbackAuditHTML();
                            }, 2000);
                        }
                    };
                    
                    // Fonction pour g√©n√©rer l'interface d'audit avec les vraies donn√©es
                    window.generateAuditHTML = function(data) {
                        const { logs, pagination } = data;
                        
                        const logsHTML = logs.map(log => {
                            const actionIcon = getActionIcon(log.action_type);
                            const actionColor = getActionColor(log.action_type);
                            const statusColor = getStatusColor(log.action_type);
                            
                            return `
                                <div class="audit-log-card" style="background: white; border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; transition: all 0.3s ease; position: relative;" onmouseover="this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)'" onmouseout="this.style.boxShadow='none'">
                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.5rem;">
                                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                                            <div style="width: 40px; height: 40px; background: ${actionColor}20; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                                <i class='bx ${actionIcon}' style="color: ${actionColor}; font-size: 1.2rem;"></i>
                                            </div>
                                            <div>
                                                <h4 style="margin: 0; font-size: 0.95rem; color: #1f2937;">${formatActionTitle(log.action_type)}</h4>
                                                <p style="margin: 0; font-size: 0.85rem; color: #6b7280;">Par ${log.actor_name} (${log.actor_email})</p>
                                            </div>
                                        </div>
                                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                                            <span style="background: ${statusColor}20; color: ${statusColor}; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: 500;">${formatActionStatus(log.action_type)}</span>
                                            <button onclick="deleteSingleAuditLog(${log.id})" style="width: 32px; height: 32px; background: #fee2e2; color: #ef4444; border: none; border-radius: 50%; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.2s ease;" onmouseover="this.style.background='#ef4444'; this.style.color='white'" onmouseout="this.style.background='#fee2e2'; this.style.color='#ef4444'" title="Supprimer ce log">
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    </div>
                                    <p style="margin: 0; font-size: 0.9rem; color: #4b5563;">${formatActionDescription(log)}</p>
                                    <div style="margin-top: 0.75rem; font-size: 0.8rem; color: #9ca3af;">
                                        <i class='bx bx-time'></i> ${log.formatted_date} ‚Ä¢ IP: ${log.ip_address}
                                    </div>
                                </div>
                            `;
                        }).join('');
                        
                        return `
                            <div class="audit-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                                <div>
                                    <h3 style="margin: 0; color: #1f2937;">Historique des actions</h3>
                                    <p style="margin: 0; color: #6b7280; font-size: 0.9rem;">${pagination.total} entr√©es ‚Ä¢ Donn√©es en temps r√©el</p>
                                </div>
                                <div style="display: flex; gap: 0.5rem;">
                                    <button class="btn-secondary" onclick="refreshAudit()" style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; background: white; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-refresh'></i> Actualiser
                                    </button>
                                    <button class="btn-secondary" onclick="exportAudit()" style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; background: white; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-export'></i> Exporter
                                    </button>
                                    <button class="btn-danger" onclick="clearAllAuditLogs()" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-trash-alt'></i> Vider l'historique
                                    </button>
                                </div>
                            </div>
                            
                            <div class="audit-logs-list">
                                ${logsHTML}
                            </div>
                            
                            ${pagination.pages > 1 ? `
                                <div style="text-align: center; margin-top: 2rem;">
                                    <button onclick="loadMoreAuditLogs()" style="padding: 0.75rem 1.5rem; background: #f3f4f6; color: #4b5563; border: 1px solid #d1d5db; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-refresh'></i> Charger plus d'entr√©es
                                    </button>
                                </div>
                            ` : ''}
                        `;
                    };
                    
                    // Fonction pour obtenir l'ic√¥ne d'une action
                    window.getActionIcon = function(actionType) {
                        const iconMap = {
                            'USER_CREATED': 'bx-user-plus',
                            'USER_UPDATED': 'bx-user-check',
                            'USER_DEACTIVATED': 'bx-user-minus',
                            'USER_ACTIVATED': 'bx-user-check',
                            'ROLE_ASSIGNED': 'bx-shield-check',
                            'ROLE_REVOKED': 'bx-shield-x',
                            'PERMISSION_GRANTED': 'bx-key',
                            'PERMISSION_REVOKED': 'bx-key',
                            'MATRIX_SAVED': 'bx-save',
                            'AUDIT_DELETION': 'bx-trash',
                            'LOGIN': 'bx-log-in',
                            'LOGOUT': 'bx-log-out'
                        };
                        return iconMap[actionType] || 'bx-info-circle';
                    };
                    
                    // Fonction pour obtenir la couleur d'une action
                    window.getActionColor = function(actionType) {
                        const colorMap = {
                            'USER_CREATED': '#10b981',
                            'USER_UPDATED': '#3b82f6',
                            'USER_DEACTIVATED': '#ef4444',
                            'USER_ACTIVATED': '#10b981',
                            'ROLE_ASSIGNED': '#8b5cf6',
                            'ROLE_REVOKED': '#ef4444',
                            'PERMISSION_GRANTED': '#10b981',
                            'PERMISSION_REVOKED': '#ef4444',
                            'MATRIX_SAVED': '#3b82f6',
                            'AUDIT_DELETION': '#ef4444',
                            'LOGIN': '#10b981',
                            'LOGOUT': '#6b7280'
                        };
                        return colorMap[actionType] || '#6b7280';
                    };
                    
                    // Fonction pour obtenir la couleur de statut
                    window.getStatusColor = function(actionType) {
                        const statusMap = {
                            'USER_CREATED': '#10b981',
                            'USER_UPDATED': '#3b82f6',
                            'USER_DEACTIVATED': '#ef4444',
                            'USER_ACTIVATED': '#10b981',
                            'ROLE_ASSIGNED': '#8b5cf6',
                            'ROLE_REVOKED': '#ef4444',
                            'PERMISSION_GRANTED': '#10b981',
                            'PERMISSION_REVOKED': '#ef4444',
                            'MATRIX_SAVED': '#3b82f6',
                            'AUDIT_DELETION': '#ef4444',
                            'LOGIN': '#10b981',
                            'LOGOUT': '#6b7280'
                        };
                        return statusMap[actionType] || '#6b7280';
                    };
                    
                    // Fonction pour formater le titre d'une action
                    window.formatActionTitle = function(actionType) {
                        const titleMap = {
                            'USER_CREATED': 'Cr√©ation d\'utilisateur',
                            'USER_UPDATED': 'Modification d\'utilisateur',
                            'USER_DEACTIVATED': 'D√©sactivation d\'utilisateur',
                            'USER_ACTIVATED': 'Activation d\'utilisateur',
                            'ROLE_ASSIGNED': 'Attribution de r√¥le',
                            'ROLE_REVOKED': 'Retrait de r√¥le',
                            'PERMISSION_GRANTED': 'Permission accord√©e',
                            'PERMISSION_REVOKED': 'Permission retir√©e',
                            'MATRIX_SAVED': 'Sauvegarde de matrice',
                            'AUDIT_DELETION': 'Suppression d\'audit',
                            'LOGIN': 'Connexion',
                            'LOGOUT': 'D√©connexion'
                        };
                        return titleMap[actionType] || actionType;
                    };
                    
                    // Fonction pour formater le statut d'une action
                    window.formatActionStatus = function(actionType) {
                        const statusMap = {
                            'USER_CREATED': 'CR√â√â',
                            'USER_UPDATED': 'MODIFI√â',
                            'USER_DEACTIVATED': 'D√âSACTIV√â',
                            'USER_ACTIVATED': 'ACTIV√â',
                            'ROLE_ASSIGNED': 'ATTRIBU√â',
                            'ROLE_REVOKED': 'RETIR√â',
                            'PERMISSION_GRANTED': 'ACCORD√â',
                            'PERMISSION_REVOKED': 'RETIR√â',
                            'MATRIX_SAVED': 'SAUVEGARD√â',
                            'AUDIT_DELETION': 'SUPPRIM√â',
                            'LOGIN': 'CONNECT√â',
                            'LOGOUT': 'D√âCONNECT√â'
                        };
                        return statusMap[actionType] || actionType;
                    };
                    
                    // Fonction pour formater la description d'une action
                    window.formatActionDescription = function(log) {
                        if (log.action_type === 'MATRIX_SAVED' && log.details) {
                            const details = log.details;
                            
                            // Afficher les changements sp√©cifiques si disponibles
                            if (details.specific_changes && details.specific_changes.length > 0) {
                                const changesText = details.specific_changes.map(change => {
                                    let changeText = `${change.role}: `;
                                    const changes = [];
                                    
                                    if (change.added && change.added.length > 0) {
                                        changes.push(`+${change.added.join(', ')}`);
                                    }
                                    if (change.removed && change.removed.length > 0) {
                                        changes.push(`-${change.removed.join(', ')}`);
                                    }
                                    
                                    changeText += changes.join(', ');
                                    return changeText;
                                }).join(' | ');
                                
                                return `Modifications: ${changesText}`;
                            }
                            
                            // Fallback sur le r√©sum√© par r√¥le
                            if (details.roles_summary && details.roles_summary.length > 0) {
                                return `Permissions mises √† jour : ${details.roles_summary.join(', ')}`;
                            }
                            if (details.total_changes) {
                                return `${details.total_changes} permission(s) modifi√©e(s) sur ${details.roles_count} r√¥le(s)`;
                            }
                        }
                        
                        if (log.target_name) {
                            return `${log.target_name}`;
                        }
                        if (log.details && typeof log.details === 'object') {
                            if (log.details.reason) {
                                return `Raison: ${log.details.reason}`;
                            }
                            if (log.details.description) {
                                return log.details.description;
                            }
                        }
                        return 'Action effectu√©e';
                    };
                    
                    // Fonction de secours avec donn√©es statiques
                    window.generateFallbackAuditHTML = function() {
                        return `
                            <div class="audit-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                                <div>
                                    <h3 style="margin: 0; color: #1f2937;">Historique des actions</h3>
                                    <p style="margin: 0; color: #6b7280; font-size: 0.9rem;">Donn√©es de secours - Veuillez v√©rifier la connexion √† la base de donn√©es</p>
                                </div>
                                <div style="display: flex; gap: 0.5rem;">
                                    <button class="btn-secondary" style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; background: white; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-refresh'></i> Actualiser
                                    </button>
                                    <button class="btn-secondary" style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; background: white; border-radius: 6px; cursor: pointer;">
                                        <i class='bx bx-export'></i> Exporter
                                    </button>
                                </div>
                            </div>
                            
                            <div class="audit-logs-list">
                                <div class="audit-log-card" style="background: white; border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.5rem;">
                                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                                            <div style="width: 40px; height: 40px; background: #dbeafe; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                                <i class='bx bx-user-plus' style="color: #1e40af; font-size: 1.2rem;"></i>
                                            </div>
                                            <div>
                                                <h4 style="margin: 0; font-size: 0.95rem; color: #1f2937;">Cr√©ation d'utilisateur</h4>
                                                <p style="margin: 0; font-size: 0.85rem; color: #6b7280;">Par PJ (momo@gmail.com)</p>
                                            </div>
                                        </div>
                                        <span style="background: #ecfdf5; color: #065f46; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: 500;">SUCC√àS</span>
                                    </div>
                                    <p style="margin: 0; font-size: 0.9rem; color: #4b5563;">Nouvel utilisateur cr√©√© : jean.dupont@terraintrack.com</p>
                                    <div style="margin-top: 0.75rem; font-size: 0.8rem; color: #9ca3af;">
                                        <i class='bx bx-time'></i> Il y a 2 heures ‚Ä¢ IP: 192.168.1.100
                                    </div>
                                </div>
                            </div>
                        `;
                    };
                    
                    // Fonctions utilitaires pour l'audit
                    window.refreshAudit = function() {
                        console.log('üîÑ Actualisation de l\'audit...');
                        loadAuditSection();
                    };
                    
                    window.exportAudit = function() {
                        console.log('üì§ Export de l\'audit...');
                        showNotification('üì§ Fonctionnalit√© d\'export en cours de d√©veloppement', 'info');
                    };
                    
                    window.loadMoreAuditLogs = function() {
                        console.log('üìÑ Chargement de plus d\'entr√©es d\'audit...');
                        showNotification('üìÑ Fonctionnalit√© de pagination en cours de d√©veloppement', 'info');
                    };
                    
                    // Fonctions pour cr√©er des modales de confirmation professionnelles
                    window.showConfirmationModal = function(options) {
                        return new Promise((resolve) => {
                            const modal = document.createElement('div');
                            modal.className = 'modal-overlay';
                            
                            const iconClass = options.type === 'warning' ? 'modal-icon-warning' : 'modal-icon-danger';
                            const iconSymbol = options.type === 'warning' ? '‚ö†Ô∏è' : 'üóëÔ∏è';
                            
                            modal.innerHTML = `
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h3 class="modal-title">
                                            <div class="modal-icon ${iconClass}">
                                                ${options.type === 'warning' ? '‚ö†Ô∏è' : 'üóëÔ∏è'}
                                            </div>
                                            ${options.title}
                                        </h3>
                                    </div>
                                    <div class="modal-body">
                                        <p class="modal-message">${options.message}</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button class="modal-btn modal-btn-cancel" onclick="closeModal(false)">
                                            Annuler
                                        </button>
                                        <button class="modal-btn ${options.type === 'warning' ? 'modal-btn-warning' : 'modal-btn-danger'}" onclick="closeModal(true)">
                                            ${options.confirmText || 'Confirmer'}
                                        </button>
                                    </div>
                                </div>
                            `;
                            
                            document.body.appendChild(modal);
                            
                            // Fonction pour fermer la modale
                            window.closeModal = function(result) {
                                modal.style.animation = 'fadeOut 0.3s ease-in';
                                setTimeout(() => {
                                    if (modal.parentNode) {
                                        modal.parentNode.removeChild(modal);
                                    }
                                    resolve(result);
                                }, 300);
                            };
                            
                            // Fermer en cliquant sur l'overlay
                            modal.addEventListener('click', function(e) {
                                if (e.target === modal) {
                                    window.closeModal(false);
                                }
                            });
                            
                            // Fermer avec Escape
                            const handleEscape = function(e) {
                                if (e.key === 'Escape') {
                                    window.closeModal(false);
                                    document.removeEventListener('keydown', handleEscape);
                                }
                            };
                            document.addEventListener('keydown', handleEscape);
                        });
                    };
                    
                    // Fonctions de suppression d'audit avec modales professionnelles
                    window.deleteSingleAuditLog = async function(logId) {
                        const confirmed = await showConfirmationModal({
                            type: 'danger',
                            title: 'Supprimer ce log d\'audit',
                            message: '√ätes-vous s√ªr de vouloir supprimer ce log d\'audit ?<br><br>Cette action ne peut pas √™tre annul√©e.',
                            confirmText: 'Supprimer'
                        });
                        
                        if (!confirmed) {
                            showNotification('‚ùå Suppression annul√©e', 'info');
                            return;
                        }
                        
                        try {
                            console.log(`üóëÔ∏è Suppression du log d'audit ID: ${logId}`);
                            
                            const response = await fetch('/test_permissions_api.php', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    action: 'delete-audit-logs',
                                    log_ids: [logId],
                                    reason: 'Suppression individuelle'
                                })
                            });
                            
                            const data = await response.json();
                            
                            if (data.success) {
                                showNotification(`‚úÖ Log supprim√© avec succ√®s`, 'success');
                                
                                // Recharger la section audit apr√®s suppression
                                setTimeout(() => {
                                    loadAuditSection();
                                }, 1000);
                                
                            } else {
                                throw new Error(data.error || 'Erreur lors de la suppression');
                            }
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors de la suppression du log:', error);
                            showNotification(`‚ùå Erreur: ${error.message}`, 'error');
                        }
                    };
                    
                    window.clearAllAuditLogs = async function() {
                        // Confirmation renforc√©e avec modale professionnelle
                        const confirmed = await showConfirmationModal({
                            type: 'warning',
                            title: 'Vider tout l\'historique',
                            message: '√ätes-vous s√ªr de vouloir supprimer TOUS les logs d\'audit ?<br><br><strong>Cette action est irr√©versible</strong> et supprimera d√©finitivement l\'historique complet des actions.',
                            confirmText: 'Vider l\'historique'
                        });
                        
                        if (!confirmed) {
                            showNotification('‚ùå Suppression annul√©e', 'info');
                            return;
                        }
                        
                        try {
                            console.log('üóëÔ∏è Suppression de tout l\'historique d\'audit...');
                            
                            // R√©cup√©rer tous les IDs des logs actuels
                            const response = await fetch('/test_permissions_api.php?action=audit');
                            const data = await response.json();
                            
                            if (!data.success || data.logs.length === 0) {
                                showNotification('‚ÑπÔ∏è Aucun log √† supprimer', 'info');
                                return;
                            }
                            
                            const allLogIds = data.logs.map(log => log.id);
                            
                            const deleteResponse = await fetch('/test_permissions_api.php', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    action: 'delete-audit-logs',
                                    log_ids: allLogIds,
                                    reason: 'Vidage complet de l\'historique'
                                })
                            });
                            
                            const deleteData = await deleteResponse.json();
                            
                            if (deleteData.success) {
                                showNotification(`‚úÖ Historique vid√© - ${deleteData.deleted_count} log(s) supprim√©(s)`, 'success');
                                
                                // Recharger la section audit apr√®s suppression
                                setTimeout(() => {
                                    loadAuditSection();
                                }, 1000);
                                
                            } else {
                                throw new Error(deleteData.error || 'Erreur lors du vidage');
                            }
                            
                        } catch (error) {
                            console.error('‚ùå Erreur lors du vidage de l\'historique:', error);
                            showNotification(`‚ùå Erreur: ${error.message}`, 'error');
                        }
                    };
                    
                    // Attacher les √©v√©nements aux onglets
                    document.querySelectorAll('.permissions-tab').forEach(tab => {
                        tab.addEventListener('click', function() {
                            const sectionName = this.dataset.tab;
                            if (sectionName) {
                                showSection(sectionName);
                            }
                        });
                    });
                    
                    console.log('‚úÖ Syst√®me de secours activ√© pour tous les onglets');
                    
                    // Charger la premi√®re section par d√©faut (R√¥les)
                    setTimeout(() => {
                        showSection('roles');
                    }, 500);
                    
                } else {
                    console.log('‚úÖ JavaScript principal d√©tect√©');
                }
            }, 1000);
        });
        
        // Animation CSS pour le spinner et styles manquants
        const style = document.createElement('style');
        style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .permission-badge {
                background: #e0f2fe;
                color: #0277bd;
                padding: 0.25rem 0.75rem;
                border-radius: 12px;
                font-size: 0.75rem;
                font-weight: 500;
                display: inline-block;
                margin: 0.125rem;
            }
            
            .role-permissions {
                display: flex;
                flex-wrap: wrap;
                gap: 0.25rem;
                margin-top: 0.5rem;
            }
            
            .permissions-table {
                width: 100%;
                border-collapse: collapse;
                background: white;
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            
            .permissions-table th {
                background: #f9fafb;
                font-weight: 600;
                color: #374151;
                border-bottom: 2px solid #e5e7eb;
            }
            
            .permissions-table td {
                border-bottom: 1px solid #f3f4f6;
            }
            
            .permissions-matrix-container {
                overflow-x: auto;
            }
            
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
            
            /* Styles pour les modales de confirmation */
            .modal-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000;
                animation: fadeIn 0.3s ease-out;
            }
            
            .modal-content {
                background: white;
                border-radius: 12px;
                padding: 0;
                max-width: 500px;
                width: 90%;
                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
                animation: slideInUp 0.3s ease-out;
            }
            
            .modal-header {
                padding: 1.5rem 1.5rem 1rem 1.5rem;
                border-bottom: 1px solid #e5e7eb;
            }
            
            .modal-title {
                font-size: 1.25rem;
                font-weight: 600;
                color: #1f2937;
                margin: 0;
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }
            
            .modal-body {
                padding: 1rem 1.5rem;
            }
            
            .modal-message {
                color: #4b5563;
                line-height: 1.6;
                margin: 0;
            }
            
            .modal-footer {
                padding: 1rem 1.5rem 1.5rem 1.5rem;
                display: flex;
                gap: 0.75rem;
                justify-content: flex-end;
            }
            
            .modal-btn {
                padding: 0.75rem 1.5rem;
                border-radius: 8px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s ease;
                border: none;
                font-size: 0.9rem;
            }
            
            .modal-btn-cancel {
                background: #f3f4f6;
                color: #4b5563;
                border: 1px solid #d1d5db;
            }
            
            .modal-btn-cancel:hover {
                background: #e5e7eb;
            }
            
            .modal-btn-danger {
                background: #ef4444;
                color: white;
            }
            
            .modal-btn-danger:hover {
                background: #dc2626;
            }
            
            .modal-btn-warning {
                background: #f59e0b;
                color: white;
            }
            
            .modal-btn-warning:hover {
                background: #d97706;
            }
            
            .modal-icon {
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .modal-icon-danger {
                background: #fee2e2;
                color: #ef4444;
                border-radius: 50%;
            }
            
            .modal-icon-warning {
                background: #fef3c7;
                color: #f59e0b;
                border-radius: 50%;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            @keyframes slideInUp {
                from { transform: translateY(20px); opacity: 0; }
                to { transform: translateY(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html> 