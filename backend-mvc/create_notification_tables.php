<?php
/**
 * Script de migration pour cr√©er les tables de notifications automatiques
 * Base de donn√©es : exemple
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<!DOCTYPE html>
<html>
<head>
    <title>Migration - Tables de Notifications</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .success { color: #28a745; font-weight: bold; }
        .error { color: #dc3545; font-weight: bold; }
        .info { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #2196f3; }
        .warning { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107; }
        .step { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #6c757d; }
        h1 { color: #333; text-align: center; }
        h2 { color: #495057; border-bottom: 2px solid #dee2e6; padding-bottom: 10px; }
        .code { background: #f8f9fa; padding: 10px; border-radius: 3px; font-family: monospace; margin: 10px 0; }
    </style>
</head>
<body>
    <div class='container'>
        <h1>üîî Migration - Tables de Notifications Automatiques</h1>
        <p><strong>Base de donn√©es :</strong> exemple</p>";

try {
    // Connexion √† la base de donn√©es
    echo "<div class='step'><h2>üîå √âtape 1 : Connexion √† la base de donn√©es</h2>";
    
    $pdo = new PDO(
        'mysql:host=localhost;dbname=exemple;charset=utf8mb4',
        'root',
        'root',
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]
    );
    
    echo "<p class='success'>‚úÖ Connexion √† la base 'exemple' r√©ussie</p></div>";
    
    // V√©rifier l'existence des tables
    echo "<div class='step'><h2>üîç √âtape 2 : V√©rification des tables existantes</h2>";
    
    $tables = ['notification_preferences', 'maintenance_schedules', 'notification_queue', 'notification_logs'];
    $existingTables = [];
    
    foreach ($tables as $table) {
        $stmt = $pdo->query("SHOW TABLES LIKE '$table'");
        if ($stmt->rowCount() > 0) {
            $existingTables[] = $table;
            echo "<p class='warning'>‚ö†Ô∏è Table '$table' existe d√©j√†</p>";
        } else {
            echo "<p class='info'>‚ÑπÔ∏è Table '$table' n'existe pas - sera cr√©√©e</p>";
        }
    }
    echo "</div>";
    
    // Cr√©er la table notification_preferences
    echo "<div class='step'><h2>üìã √âtape 3 : Cr√©ation de la table notification_preferences</h2>";
    
    if (!in_array('notification_preferences', $existingTables)) {
        $sql = "CREATE TABLE notification_preferences (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL UNIQUE,
            email_notifications BOOLEAN DEFAULT TRUE,
            sms_notifications BOOLEAN DEFAULT FALSE,
            intervention_assignments BOOLEAN DEFAULT TRUE,
            maintenance_reminders BOOLEAN DEFAULT TRUE,
            critical_alerts BOOLEAN DEFAULT TRUE,
            reminder_frequency_days INT DEFAULT 7,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )";
        
        $pdo->exec($sql);
        echo "<p class='success'>‚úÖ Table 'notification_preferences' cr√©√©e avec succ√®s</p>";
    } else {
        echo "<p class='info'>‚ÑπÔ∏è Table 'notification_preferences' existe d√©j√† - ignor√©e</p>";
    }
    echo "</div>";
    
    // Cr√©er la table maintenance_schedules
    echo "<div class='step'><h2>üîß √âtape 4 : Cr√©ation de la table maintenance_schedules</h2>";
    
    if (!in_array('maintenance_schedules', $existingTables)) {
        $sql = "CREATE TABLE maintenance_schedules (
            id INT AUTO_INCREMENT PRIMARY KEY,
            vehicle_id INT NOT NULL,
            maintenance_type VARCHAR(100) NOT NULL,
            scheduled_date DATE NOT NULL,
            due_date DATE NOT NULL,
            priority ENUM('low', 'medium', 'high', 'critical') DEFAULT 'medium',
            description TEXT,
            assigned_technician_id INT,
            status ENUM('scheduled', 'in_progress', 'completed', 'cancelled') DEFAULT 'scheduled',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE,
            FOREIGN KEY (assigned_technician_id) REFERENCES users(id) ON DELETE SET NULL
        )";
        
        $pdo->exec($sql);
        echo "<p class='success'>‚úÖ Table 'maintenance_schedules' cr√©√©e avec succ√®s</p>";
    } else {
        echo "<p class='info'>‚ÑπÔ∏è Table 'maintenance_schedules' existe d√©j√† - ignor√©e</p>";
    }
    echo "</div>";
    
    // Cr√©er la table notification_queue
    echo "<div class='step'><h2>üì¨ √âtape 5 : Cr√©ation de la table notification_queue</h2>";
    
    if (!in_array('notification_queue', $existingTables)) {
        $sql = "CREATE TABLE notification_queue (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            notification_type ENUM('email', 'sms', 'push') NOT NULL,
            subject VARCHAR(255),
            message TEXT NOT NULL,
            template_name VARCHAR(100),
            template_data JSON,
            priority ENUM('low', 'medium', 'high', 'critical') DEFAULT 'medium',
            status ENUM('pending', 'sent', 'failed', 'cancelled') DEFAULT 'pending',
            attempts INT DEFAULT 0,
            max_attempts INT DEFAULT 3,
            scheduled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            sent_at TIMESTAMP NULL,
            error_message TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )";
        
        $pdo->exec($sql);
        echo "<p class='success'>‚úÖ Table 'notification_queue' cr√©√©e avec succ√®s</p>";
    } else {
        echo "<p class='info'>‚ÑπÔ∏è Table 'notification_queue' existe d√©j√† - ignor√©e</p>";
    }
    echo "</div>";
    
    // Cr√©er la table notification_logs
    echo "<div class='step'><h2>üìä √âtape 6 : Cr√©ation de la table notification_logs</h2>";
    
    if (!in_array('notification_logs', $existingTables)) {
        $sql = "CREATE TABLE notification_logs (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            notification_type ENUM('email', 'sms', 'push') NOT NULL,
            subject VARCHAR(255),
            message TEXT,
            status ENUM('sent', 'failed', 'bounced') NOT NULL,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            error_message TEXT,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )";
        
        $pdo->exec($sql);
        echo "<p class='success'>‚úÖ Table 'notification_logs' cr√©√©e avec succ√®s</p>";
    } else {
        echo "<p class='info'>‚ÑπÔ∏è Table 'notification_logs' existe d√©j√† - ignor√©e</p>";
    }
    echo "</div>";
    
    // Ajouter des colonnes √† la table users
    echo "<div class='step'><h2>üë§ √âtape 7 : Ajout de colonnes √† la table users</h2>";
    
    // V√©rifier si les colonnes existent d√©j√†
    $stmt = $pdo->query("DESCRIBE users");
    $columns = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    $newColumns = [
        'phone' => "ADD COLUMN phone VARCHAR(20) DEFAULT NULL",
        'notification_email' => "ADD COLUMN notification_email VARCHAR(255) DEFAULT NULL",
        'notification_sms' => "ADD COLUMN notification_sms BOOLEAN DEFAULT FALSE"
    ];
    
    foreach ($newColumns as $column => $sql) {
        if (!in_array($column, $columns)) {
            $pdo->exec("ALTER TABLE users $sql");
            echo "<p class='success'>‚úÖ Colonne '$column' ajout√©e √† la table users</p>";
        } else {
            echo "<p class='info'>‚ÑπÔ∏è Colonne '$column' existe d√©j√† - ignor√©e</p>";
        }
    }
    echo "</div>";
    
    // Ins√©rer des donn√©es de test
    echo "<div class='step'><h2>üß™ √âtape 8 : Insertion de donn√©es de test</h2>";
    
    // R√©cup√©rer les utilisateurs existants
    $stmt = $pdo->query("SELECT id FROM users LIMIT 3");
    $users = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    if (!empty($users)) {
        // Ins√©rer des pr√©f√©rences de notification pour les utilisateurs existants
        foreach ($users as $userId) {
            $stmt = $pdo->prepare("INSERT IGNORE INTO notification_preferences 
                (user_id, email_notifications, sms_notifications, intervention_assignments, maintenance_reminders, critical_alerts) 
                VALUES (?, TRUE, FALSE, TRUE, TRUE, TRUE)");
            $stmt->execute([$userId]);
        }
        echo "<p class='success'>‚úÖ Pr√©f√©rences de notification cr√©√©es pour " . count($users) . " utilisateurs</p>";
        
        // Ins√©rer quelques exemples de maintenance
        $maintenanceExamples = [
            ['Vidange moteur', '2024-01-15', '2024-01-20', 'medium'],
            ['Contr√¥le technique', '2024-01-20', '2024-01-25', 'high'],
            ['R√©vision g√©n√©rale', '2024-01-25', '2024-01-30', 'medium']
        ];
        
        foreach ($maintenanceExamples as $index => $maintenance) {
            $stmt = $pdo->prepare("INSERT IGNORE INTO maintenance_schedules 
                (vehicle_id, maintenance_type, scheduled_date, due_date, priority, description, assigned_technician_id) 
                VALUES (1, ?, ?, ?, ?, ?, ?)");
            $stmt->execute([
                $maintenance[0],
                $maintenance[1],
                $maintenance[2],
                $maintenance[3],
                "Maintenance programm√©e - " . $maintenance[0],
                $users[0] ?? null
            ]);
        }
        echo "<p class='success'>‚úÖ " . count($maintenanceExamples) . " exemples de maintenance cr√©√©s</p>";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è Aucun utilisateur trouv√© - donn√©es de test non cr√©√©es</p>";
    }
    echo "</div>";
    
    // V√©rification finale
    echo "<div class='step'><h2>‚úÖ √âtape 9 : V√©rification finale</h2>";
    
    $finalTables = ['notification_preferences', 'maintenance_schedules', 'notification_queue', 'notification_logs'];
    $allCreated = true;
    
    foreach ($finalTables as $table) {
        $stmt = $pdo->query("SHOW TABLES LIKE '$table'");
        if ($stmt->rowCount() > 0) {
            $count = $pdo->query("SELECT COUNT(*) FROM $table")->fetchColumn();
            echo "<p class='success'>‚úÖ Table '$table' : $count enregistrements</p>";
        } else {
            echo "<p class='error'>‚ùå Table '$table' : ERREUR</p>";
            $allCreated = false;
        }
    }
    
    if ($allCreated) {
        echo "<div class='info'>
            <h3>üéâ Migration termin√©e avec succ√®s !</h3>
            <p>Toutes les tables de notifications automatiques ont √©t√© cr√©√©es.</p>
            <p><strong>Prochaines √©tapes :</strong></p>
            <ul>
                <li>Cr√©er les services d'email et SMS</li>
                <li>Int√©grer les notifications dans les contr√¥leurs</li>
                <li>Configurer les pr√©f√©rences utilisateur</li>
                <li>Mettre en place les rappels automatiques</li>
            </ul>
        </div>";
    } else {
        echo "<p class='error'>‚ùå Certaines tables n'ont pas √©t√© cr√©√©es correctement</p>";
    }
    
} catch (PDOException $e) {
    echo "<div class='error'>
        <h3>‚ùå Erreur de base de donn√©es</h3>
        <p><strong>Message :</strong> " . $e->getMessage() . "</p>
        <p><strong>Code :</strong> " . $e->getCode() . "</p>
    </div>";
} catch (Exception $e) {
    echo "<div class='error'>
        <h3>‚ùå Erreur g√©n√©rale</h3>
        <p><strong>Message :</strong> " . $e->getMessage() . "</p>
    </div>";
}

echo "</div></body></html>";
?>



