<?php
/**
 * Debug approfondi du probl√®me de cache navigateur
 * V√©rifie tous les aspects possibles du probl√®me
 */

require_once __DIR__ . '/src/Service/EnvService.php';
require_once __DIR__ . '/src/Service/Database.php';
require_once __DIR__ . '/src/Service/SessionManager.php';

header('Content-Type: text/plain; charset=utf-8');

echo "üîç DEBUG APPROFONDI CACHE NAVIGATEUR\n";
echo "====================================\n\n";

try {
    echo "1Ô∏è‚É£ V√©rification de l'√©tat actuel:\n";
    
    // D√©marrer la session
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    echo "   Session ID: " . session_id() . "\n";
    echo "   Session status: " . (session_status() === PHP_SESSION_ACTIVE ? 'ACTIVE' : 'INACTIVE') . "\n";
    
    // V√©rifier l'authentification
    $isAuthenticated = \App\Service\SessionManager::isAuthenticated();
    echo "   Authentifi√©: " . ($isAuthenticated ? 'OUI' : 'NON') . "\n";
    
    if ($isAuthenticated) {
        $currentUser = \App\Service\SessionManager::getCurrentUser();
        if ($currentUser) {
            echo "   Utilisateur actuel: " . $currentUser['email'] . " (ID: " . $currentUser['id'] . ")\n";
        }
    }
    
    echo "\n2Ô∏è‚É£ Test de cr√©ation de session momo:\n";
    
    // Forcer la cr√©ation d'une session pour momo
    $_SESSION['user'] = [
        'id' => 7,
        'email' => 'momo@gmail.com',
        'name' => 'PJ',
        'role' => 'admin'
    ];
    $_SESSION['authenticated'] = true;
    
    echo "   ‚úÖ Session momo cr√©√©e\n";
    echo "   Session ID: " . session_id() . "\n";
    echo "   Utilisateur en session: " . $_SESSION['user']['email'] . "\n";
    
    echo "\n3Ô∏è‚É£ Test de l'authentification avec session momo:\n";
    
    $isAuthenticatedNow = \App\Service\SessionManager::isAuthenticated();
    echo "   Authentifi√© apr√®s cr√©ation session: " . ($isAuthenticatedNow ? 'OUI' : 'NON') . "\n";
    
    if ($isAuthenticatedNow) {
        $currentUserNow = \App\Service\SessionManager::getCurrentUser();
        if ($currentUserNow) {
            echo "   Utilisateur actuel: " . $currentUserNow['email'] . "\n";
        }
    }
    
    echo "\n4Ô∏è‚É£ Test de r√©cup√©ration des donn√©es avec session momo:\n";
    
    $pdo = \App\Service\Database::connect();
    $stmt = $pdo->prepare("SELECT id, email, name, phone, role, department, location, timezone, language, avatar FROM users WHERE id = ?");
    $stmt->execute([7]); // ID de momo
    $momoData = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($momoData) {
        echo "   ‚úÖ Donn√©es momo r√©cup√©r√©es:\n";
        echo "     - Email: " . $momoData['email'] . "\n";
        echo "     - Nom: " . ($momoData['name'] ?? 'NULL') . "\n";
        echo "     - T√©l√©phone: " . ($momoData['phone'] ?? 'NULL') . "\n";
        echo "     - R√¥le: " . ($momoData['role'] ?? 'NULL') . "\n";
        echo "     - D√©partement: " . ($momoData['department'] ?? 'NULL') . "\n";
        echo "     - Localisation: " . ($momoData['location'] ?? 'NULL') . "\n";
        echo "     - Fuseau horaire: " . ($momoData['timezone'] ?? 'NULL') . "\n";
        echo "     - Langue: " . ($momoData['language'] ?? 'NULL') . "\n";
    } else {
        echo "   ‚ùå Impossible de r√©cup√©rer les donn√©es momo\n";
    }
    
    echo "\n5Ô∏è‚É£ Test de l'endpoint settings avec session momo:\n";
    
    // Simuler l'appel √† SettingsController
    echo "   Simulation de l'appel SettingsController...\n";
    
    // V√©rifier si l'utilisateur est authentifi√©
    if (!\App\Service\SessionManager::isAuthenticated()) {
        echo "   ‚ùå Utilisateur non authentifi√©\n";
    } else {
        $user = \App\Service\SessionManager::getCurrentUser();
        if (!$user) {
            echo "   ‚ùå Impossible de r√©cup√©rer l'utilisateur\n";
        } else {
            echo "   ‚úÖ Utilisateur r√©cup√©r√©: " . $user['email'] . "\n";
            
            // R√©cup√©rer les donn√©es utilisateur
            $stmt = $pdo->prepare("SELECT id, email, name, phone, role, department, location, timezone, language, avatar FROM users WHERE id = ?");
            $stmt->execute([$user['id']]);
            $userData = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($userData) {
                echo "   ‚úÖ Donn√©es utilisateur r√©cup√©r√©es:\n";
                echo "     - Email: " . $userData['email'] . "\n";
                echo "     - Nom: " . ($userData['name'] ?? 'NULL') . "\n";
                echo "     - T√©l√©phone: " . ($userData['phone'] ?? 'NULL') . "\n";
                echo "     - R√¥le: " . ($userData['role'] ?? 'NULL') . "\n";
                echo "     - D√©partement: " . ($userData['department'] ?? 'NULL') . "\n";
                echo "     - Localisation: " . ($userData['location'] ?? 'NULL') . "\n";
                echo "     - Fuseau horaire: " . ($userData['timezone'] ?? 'NULL') . "\n";
                echo "     - Langue: " . ($userData['language'] ?? 'NULL') . "\n";
                
                // V√©rifier si c'est bien momo
                if ($userData['email'] === 'momo@gmail.com') {
                    echo "   ‚úÖ C'est bien momo@gmail.com\n";
                } else {
                    echo "   ‚ùå PROBL√àME: Ce n'est pas momo@gmail.com mais " . $userData['email'] . "\n";
                }
            } else {
                echo "   ‚ùå Impossible de r√©cup√©rer les donn√©es utilisateur\n";
            }
        }
    }
    
    echo "\n6Ô∏è‚É£ V√©rification des logs:\n";
    
    $logFile = __DIR__ . '/logs/app.log';
    if (file_exists($logFile)) {
        $logContent = file_get_contents($logFile);
        $logLines = explode("\n", $logContent);
        $recentLines = array_slice($logLines, -10); // 10 derni√®res lignes
        
        echo "   Derni√®res lignes du log:\n";
        foreach ($recentLines as $line) {
            if (!empty(trim($line))) {
                echo "     " . $line . "\n";
            }
        }
    } else {
        echo "   ‚ùå Fichier de log non trouv√©: $logFile\n";
    }
    
    echo "\n7Ô∏è‚É£ Test de l'endpoint settings en direct:\n";
    
    // Simuler une requ√™te GET vers /settings
    $originalRequestMethod = $_SERVER['REQUEST_METHOD'] ?? 'GET';
    $originalRequestUri = $_SERVER['REQUEST_URI'] ?? '/';
    
    $_SERVER['REQUEST_METHOD'] = 'GET';
    $_SERVER['REQUEST_URI'] = '/settings';
    
    echo "   Simulation requ√™te GET /settings\n";
    
    // Capturer la sortie
    ob_start();
    
    try {
        // Inclure le SettingsController
        require_once __DIR__ . '/src/Controller/SettingsController.php';
        require_once __DIR__ . '/src/Service/TwigService.php';
        require_once __DIR__ . '/src/Repository/UserRepository.php';
        require_once __DIR__ . '/src/Repository/UserSettingsRepository.php';
        require_once __DIR__ . '/src/Repository/NotificationSettingsRepository.php';
        require_once __DIR__ . '/src/Repository/AppearanceSettingsRepository.php';
        require_once __DIR__ . '/src/Repository/SystemSettingsRepository.php';
        require_once __DIR__ . '/src/Service/OfflineModeService.php';
        require_once __DIR__ . '/src/Service/CacheService.php';
        require_once __DIR__ . '/src/Service/AutoSaveService.php';
        
        // Cr√©er les instances n√©cessaires
        $pdo = \App\Service\Database::connect();
        $twigService = new \App\Service\TwigService(__DIR__ . '/template', __DIR__ . '/var/cache');
        $userRepository = new \App\Repository\UserRepository($pdo);
        $userSettingsRepository = new \App\Repository\UserSettingsRepository($pdo);
        $notificationSettingsRepository = new \App\Repository\NotificationSettingsRepository($pdo);
        $appearanceSettingsRepository = new \App\Repository\AppearanceSettingsRepository($pdo);
        $systemSettingsRepository = new \App\Repository\SystemSettingsRepository($pdo);
        $offlineModeService = new \App\Service\OfflineModeService();
        $cacheService = new \App\Service\CacheService();
        $autoSaveService = new \App\Service\AutoSaveService();
        
        $settingsController = new \App\Controller\SettingsController(
            $twigService,
            $userRepository,
            $userSettingsRepository,
            $notificationSettingsRepository,
            $appearanceSettingsRepository,
            $systemSettingsRepository,
            $offlineModeService,
            $cacheService,
            $autoSaveService
        );
        
        // Appeler la m√©thode index
        $settingsController->index();
        
    } catch (Exception $e) {
        echo "   ‚ùå Erreur lors de l'appel SettingsController: " . $e->getMessage() . "\n";
        echo "   Stack trace: " . $e->getTraceAsString() . "\n";
    }
    
    $output = ob_get_clean();
    
    // Restaurer les variables originales
    $_SERVER['REQUEST_METHOD'] = $originalRequestMethod;
    $_SERVER['REQUEST_URI'] = $originalRequestUri;
    
    echo "   Longueur de la sortie: " . strlen($output) . " caract√®res\n";
    
    if (strlen($output) > 0) {
        echo "   ‚úÖ SettingsController a g√©n√©r√© du contenu\n";
        
        // Chercher des indices dans le contenu
        if (strpos($output, 'pjorsini20@gmail.com') !== false) {
            echo "   ‚ùå PROBL√àME: Contenu contient pjorsini20@gmail.com\n";
        }
        if (strpos($output, 'momo@gmail.com') !== false) {
            echo "   ‚úÖ Contenu contient momo@gmail.com\n";
        }
        if (strpos($output, 'PJ') !== false) {
            echo "   ‚úÖ Contenu contient PJ\n";
        }
        
        // Afficher un extrait du contenu
        $extract = substr($output, 0, 500);
        echo "   Extrait du contenu (500 premiers caract√®res):\n";
        echo "   " . str_replace("\n", "\n   ", $extract) . "\n";
    } else {
        echo "   ‚ùå SettingsController n'a g√©n√©r√© aucun contenu\n";
    }
    
    echo "\n8Ô∏è‚É£ Recommandations finales:\n";
    
    if (!$isAuthenticatedNow) {
        echo "   ‚ùå PROBL√àME: SessionManager ne reconna√Æt pas la session\n";
        echo "   üîß SOLUTION: V√©rifier la configuration de SessionManager\n";
    } else if (isset($currentUserNow) && $currentUserNow['email'] === 'momo@gmail.com') {
        echo "   ‚úÖ Session momo fonctionne\n";
        echo "   üîß PROBL√àME: Cache navigateur persistant\n";
        echo "   üîß SOLUTION: Utiliser une fen√™tre de navigation priv√©e\n";
    } else {
        echo "   ‚ùå PROBL√àME: Session cr√©√©e mais pas reconnue\n";
        echo "   üîß SOLUTION: V√©rifier la logique de SessionManager\n";
    }
    
    echo "\n" . str_repeat("=", 50) . "\n";
    echo "R√âSUM√â FINAL\n";
    echo str_repeat("=", 50) . "\n";
    
    if ($isAuthenticatedNow && isset($currentUserNow) && $currentUserNow['email'] === 'momo@gmail.com') {
        echo "‚úÖ SESSION MOMO FONCTIONNE\n";
        echo "üîß PROBL√àME: Cache navigateur persistant\n";
        echo "üîß SOLUTION: Utiliser une fen√™tre de navigation priv√©e\n";
    } else {
        echo "‚ùå PROBL√àME: SessionManager ne fonctionne pas correctement\n";
        echo "üîß SOLUTION: V√©rifier la configuration de SessionManager\n";
    }
    
} catch (Exception $e) {
    echo "‚ùå ERREUR: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}
?>
